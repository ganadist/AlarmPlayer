#!/usr/bin/env python2

import glob
import os, sys
import json
import datetime
import time
from lib import *
import config

Log = Logger('main')

class AlarmPlayer:
    def __init__(self, filename):
        self.filename = filename

    def run(self):
        filename = self.filename
        if not os.access(filename, os.R_OK):
            filename = config.DEFAULT_ALARM

        self.player = Player(filename)

class TimeSyncManager:
    def __init__(self, cb, *args):
        self.time = time.time()
        self.tag = Timer(10 * 1000, self.check_time)
        self.proc = None
        self.cb = cb
        self.cb_args = args

    def check_time(self):
        ctime = time.time()
        if abs(self.time - ctime) > 20:
            Log.i('clock was changed, run time sync callback')
            try:
              self.cb(*self.cb_args)
            except:
              pass
        self.time = ctime
        self.tag = Timer(10 * 1000, self.check_time)

    def sync(self):
        if self.proc:
            Log.w('time sync is proceeding, ignore.')
            return
        cmd = ('sudo', '/usr/sbin/ntpdate-debian')
        self.proc = Spawn(cmd, self.watch)

    def watch(self, pid, status):
        self.proc = None
        if status == 0:
            self.check_time()
            return
        Log.e('ntpdate failed. reschedule time sync')
        self.sync_tag = Timer(10 * 1000, self.sync)

class DownloadManager:
    def __init__(self):
        self.fetch_list = []

    def add(self, url, outname):
        self.fetch_list.append(Fetcher(url, outname))

    def run(self):
        self.cleanup()
        if not self.fetch_list:
            return

        fetcher = self.fetch_list[0]
        fetcher.run(self.next)

    def cleanup(self):
        old_files = glob.glob(os.path.join(config.CONFIG_FILE + '*.ogg'))
        new_files = [f.outname for f in self.fetch_list]
        for f in set(old_files) - set(new_files):
            try:
                os.unlink(f)
            except OSError, e:
                print e

        fetch_list = []
        for f in self.fetch_list:
            if not os.access(f.outname, os.R_OK):
                fetch_list.append(f)
        self.fetch_list = fetch_list

    def next(self, success, fetcher):
        self.fetch_list.pop(0)
        if not success:
            self.fetch_list.append(fetcher)

        if not self.fetch_list:
            return

        self.run()

class FetcherService:
    RETRY_DELAY = 10 * 60 * 1000
    def __init__(self, url, filename):
        self.filename = os.path.join(config.CACHE_DIR, filename)
        self.url = url
        self.fetcher = Fetcher(url, self.filename)
        self.schedule()
        if 1 or not os.access(self.filename, os.R_OK):
            self.fetch()
        else:
            self.parse()

    def schedule(self):
        if config.FETCH_INTERVAL:
            self.tag = Timer(config.FETCH_INTERVAL, self.fetch)
        else:
            self.tag = DailyScheduler(config.FETCH_TIME, self.fetch)

    def fetch(self):
        self.fetcher.run(self.fetch_completed)

    def retry(self):
        self.tag = Timer(self.RETRY_DELAY, self.fetch)

    def clock_changed(self):
        if not os.access(self.filename, os.R_OK):
            if not self.fetcher.is_running():
                self.retry()
            Log.w('%s is not fetched yet.'%self.filename)
            return
        self.parse()

    def fetch_completed(self, success, fetcher):
        if not success:
            Log.e('fetch %s failed'%self.filename)
            self.retry()
            return

        try:
            self.parse()
        except Exception as e:
            Log.e('parse error: %s'%e)
            self.retry()
        else:
            self.schedule()

    def parse(self):
        raise NotImplementedError

def get_filename(key):
    outname = str(key) + '.ogg'
    return os.path.join(config.CACHE_DIR, outname)

class TimetableFetcherService(FetcherService):
    def __init__(self, syncmgr):
        FetcherService.__init__(self, config.TIMETABLE_URL, 'timetable.json') 
        self.syncmgr = syncmgr

    def parse(self):
        timetable = json.load(open(self.filename))
        server_time = timetable.get('timestamp')
        diff = server_time - time.time()
        Log.i("timestamp diff = %d with server"%diff)
        if abs(diff) > 30:
            self.syncmgr.sync()
            return

        schedule_alarm = []
        for item in timetable.get('timetable'):
            hms = hms2time(item.get('time'))
            outname = get_filename(item.get('sound_no'))
            weekday = int(item.get('weekday'))
            alarm = AlarmPlayer(outname)
            schedule_alarm.append(WeeklyScheduler(weekday, hms, alarm.run))

        self.schedule_alarm = schedule_alarm

class SoundlistFetcherService(FetcherService):
    def __init__(self):
        self.downloader = DownloadManager()
        FetcherService.__init__(self, config.SOUND_URL, 'soundlist.json') 

    def parse(self):
        soundlist = json.load(open(self.filename))

        URL_BASE = os.path.dirname(self.url)
        for item in soundlist.get('list'):
            outname = get_filename(item.get('no'))
            url = '/'.join((URL_BASE, str(item.get('path'))))
            self.downloader.add(url, outname)

        self.downloader.run()

 
class ScheduleFetcher:
    def __init__(self):
        self.timesync = TimeSyncManager(self.reschedule)
        self.timetable = TimetableFetcherService(self.timesync)
        self.soundlist = SoundlistFetcherService()

    def reschedule(self):
        self.timetable.clock_changed()
        self.soundlist.clock_changed()

def load_config():
    config.load()

if __name__ == '__main__':
    pwd = os.path.dirname(sys.argv[0]) or '.'
    Log.i('change pwd to %s'%pwd)
    os.chdir(pwd)
    load_config()
    f = ScheduleFetcher()
    main()
