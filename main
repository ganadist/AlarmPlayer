#!/usr/bin/env python2

import glob
import os
import json
import datetime
from lib import *
import config

class AlarmPlayer:
    def __init__(self, filename):
        self.filename = filename

    def run(self):
        filename = self.filename
        if not os.access(filename, os.R_OK):
            filename = config.DEFAULT_ALARM

        self.player = Player(filename)

class DownloadManager:
    def __init__(self):
        self.fetch_list = []

    def add(self, url, outname):
        self.fetch_list.append(Fetcher(url, outname))

    def run(self):
        self.cleanup()
        if not self.fetch_list:
            return

        fetcher = self.fetch_list[0]
        fetcher.run(self.next)

    def cleanup(self):
        old_files = glob.glob(os.path.join(config.CONFIG_FILE + '*.ogg'))
        new_files = [f.outname for f in self.fetch_list]
        for f in set(old_files) - set(new_files):
            try:
                os.unlink(f)
            except OSError, e:
                print e

        fetch_list = []
        for f in self.fetch_list:
            if not os.access(f.outname, os.R_OK):
                fetch_list.append(f)
        self.fetch_list = fetch_list

    def next(self, success, fetcher):
        self.fetch_list.pop(0)
        if not success:
            self.fetch_list.append(fetcher)

        if not self.fetch_list:
            return

        self.run()

class ScheduleFetcher:
    RETRY_DELAY = 10 * 60 * 1000
    def __init__(self):
        self.timetable_file = os.path.join(config.CACHE_DIR, 'timetable.json')
        self.soundlist_file = os.path.join(config.CACHE_DIR, 'soundlist.json')
        self.timetable_fetcher = Fetcher(config.TIMETABLE_URL, self.timetable_file)
        self.sound_fetcher = Fetcher(config.SOUND_URL, self.soundlist_file)
        self.schedule = DailyScheduler(config.FETCH_TIME, self.fetch)

        self.schedule_alarm = []
        self.downloader = DownloadManager()
        if 1 or not os.access(self.timetable_file, os.R_OK):
            self.fetch()
        else:
            self.parse_timetable(True, self.timetable_fetcher)

    def fetch(self):
        self.timetable_fetcher.run(self.parse_timetable)

    def retry_fetch_timetable(self):
        self.schedule = Timer(RETRY_DELAY,
                self.timetable_fetcher.run, self.parse_timetable)

    def retry_fetch_soundlist(self):
        self.sound_tag = Timer(RETRY_DELAY,
                self.sound_fetcher.run, self.parse_soundlist)

    def parse_timetable(self, success, fetcher):
        if not success:
            print 'fetch timetable.json failed'
            self.retry_fetch_timetable()
            return
        try:
            timetable = json.load(open(fetcher.outname))
        except ValueError, e:
            print 'invalid json timetable file', e
            self.retry_fetch_timetable()
            return
        schedule_alarm = []
        for item in timetable.get('timetable'):
            time = hms2time(item.get('time'))
            outname = str(item.get('no')) + '.ogg'
            outname = os.path.join(config.CACHE_DIR, outname)
            weekday = int(item.get('weekday'))
            alarm = AlarmPlayer(outname)
            schedule_alarm.append(WeeklyScheduler(weekday, time, alarm.run))

        self.schedule_alarm = schedule_alarm
        self.sound_fetcher.run(self.parse_soundlist)

        self.schedule = DailyScheduler(config.FETCH_TIME, self.fetch)

    def parse_soundlist(self, success, fetcher):
        if not success:
            print 'fetch soundlist.json failed'
            self.retry_fetch_soundlist()
            return

        try:
            soundlist = json.load(open(fetcher.outname))
        except ValueError, e:
            print 'invalid json soundlist file', e
            self.retry_fetch_soundlist()
            return

        URL_BASE = os.path.dirname(fetcher.url)
        for item in soundlist.get('list'):
            outname = str(item.get('no')) + '.ogg'
            outname = os.path.join(config.CACHE_DIR, outname)
            url = '/'.join((URL_BASE, str(item.get('path'))))
            self.downloader.add(url, outname)

        self.downloader.run()

def load_config():
    config.load()

if __name__ == '__main__':
    load_config()
    f = ScheduleFetcher()
    main()
