#!/usr/bin/env python2

import os
import json
import datetime
from lib import *
import config

class AlarmPlayer:
    def __init__(self, filename):
        self.filename = filename
        if not os.access(filename, os.R_OK):
            self.filename = config.DEFAULT_ALARM

    def run(self):
        self.player = Player(self.filename)

class ScheduleFetcher:
    def __init__(self):
        self.timetable_file = os.path.join(config.CACHE_DIR, 'timetable.json')
        self.soundlist_file = os.path.join(config.CACHE_DIR, 'soundlist.json')
        self.timetable_fetcher = Fetcher(config.TIMETABLE_URL, self.timetable_file)
        self.sound_fetcher = Fetcher(config.SOUND_URL, self.soundlist_file)
        self.schedule = DailyScheduler(config.FETCH_TIME, self.fetch)

        self.schedule_alarm = []
        self.schedule_fetch = []
        if 1 or not os.access(self.timetable_file, os.R_OK):
            self.fetch()

    def fetch(self):
        self.timetable_fetcher.run(self.parse_timetable)

    def parse_timetable(self, success, fetcher):
        if not success:
            print 'fetch timetable.json failed'
            return
        try:
            timetable = json.load(open(fetcher.outname))
        except ValueError:
            print 'invalid json schedule file'
            return
        schedule_alarm = []
        for item in timetable.get('timetable'):
            time = hms2time(item.get('time'))
            outname = str(item.get('no')) + '.ogg'
            outname = os.path.join(config.CACHE_DIR, outname)
            weekday = int(item.get('weekday'))
            alarm = AlarmPlayer(outname)
            schedule_alarm.append(WeeklyScheduler(weekday, time, alarm.run))

        self.schedule_alarm = schedule_alarm

        self.sound_fetcher.run(self.parse_soundlist)

    def parse_soundlist(self, success, fetcher):
        if not success:
            print 'fetch soundlist.json failed'
            return

        try:
            soundlist = json.load(open(fetcher.outname))
        except ValueError:
            print 'invalid json soundlist file'
            return

        URL_BASE = os.path.dirname(fetcher.url)
        schedule_fetch = []
        for item in soundlist.get('list'):
            outname = str(item.get('no')) + '.ogg'
            outname = os.path.join(config.CACHE_DIR, outname)
            url = '/'.join((URL_BASE, str(item.get('path'))))
            schedule_fetch.append(Fetcher(url, outname))

        self.schedule_fetch = schedule_fetch

        def cb(success, fetcher):
            self.schedule_fetch.pop(0)
            if not success:
                self.schedule_fetch.append(fetcher)

            if not self.schedule_fetch:
                return

            item = self.schedule_fetch[0]
            item.run(cb)

        if self.schedule_fetch:
            self.schedule_fetch[0].run(cb)

def load_config():
    config.load()

if __name__ == '__main__':
    load_config()
    f = ScheduleFetcher()
    main()
